plugins {
    id 'fabric-loom' version '1.9-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = "${mod_name}-${version}-Fabric-${minecraft_version}"
}

loom {
    splitEnvironmentSourceSets()
    mods {
        "tehshadur" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
    accessWidenerPath = file("src/main/resources/${modid}.accesswidener")
}

fabricApi {
    configureDataGeneration() {
        client = true
    }
}

repositories {
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
//    mappings loom.layered() {
//        officialMojangMappings()
//        parchment("org.parchmentmc.data:parchment-1.21:2024.11.10@zip")
//    }
    mappings loom.officialMojangMappings()

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    inputs.property "modid", project.modid
    inputs.property "mod_name", project.mod_name
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version,
                "modid": project.modid,
                "mod_name": project.mod_name
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

tasks.named("remapJar") {
    archiveVersion = ''
}

tasks.named("sourcesJar") {
    archiveVersion = ''
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.mod_name
            from components.java
        }
    }

    repositories {
    }
}
